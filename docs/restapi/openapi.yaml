# $schema: “https://spec.openapis.org/oas/3.1/dialect/base”
openapi: "3.1.0"
info:
  title: HDF Scalable Data Service REST API
  description: RESTful application programming interface documentation for HDF Scalable Data Service (HSDS).
  contact:
    name: The HDF Group
    url: https://www.hdfgroup.org
    email: info@hdfgroup.org
  # termsOfService: TODO url
  license:
     name: Apache 2.0
     url: https://www.apache.org/licenses/LICENSE-2.0
  version: "2.0"

externalDocs:
  description: HSDS REST API documentation
  url: "http://h5serv.readthedocs.io/en/latest/index.html"

tags:
  - name: Domain
    description: Operations involving the file Domain.
  - name: Group
    description: Operations involving Groups.
  - name: Link
    description: Operations involving Links.
  - name: Dataset
    description: Operations involving Datasets.
  - name: Datatype
    description: Operations involving Datatypes.
  - name: Attribute
    description: Operations involving Attributes.
  - name: ACLS
    description: Operations involving Attributes.

servers:
  - url: http://hsds.hdf.test:5101
    description: HSDS default server

# TBD: see https://redocly.com/docs/cli/rules/security-defined/
security: []


paths:
  /:
    put:
      summary: Create a new Domain
      description: >
        Domains represent collections of groups, datasets, and committed datatypes
        analogous to hdf5 files.

        Folders are domains which lack a root Group. Their
        main use is to provide a directory-like way to group other domains.
         
        Note: Initially, the only object in a Domain is the root group. Use
        other `put` and `post` operations to create new group, datasets, or 
        committed datatypes in the domain.

        Note: Domains (and Folders) may only be created as direct children
        of existing Domains. e.g., `/home/user/project/missing_folder/` *must*
        exist prior to the creation of Domain
        `/home/user/project/missing_folder/data.h5`, otherwise Error 404 will be returned.

        Note: The operation will fail if the domain already exists
        (Error 409).

        In addition to creation new domains, this operation can also be used with existing domains
        to flush recent changes to the domain to storage (see `flush` parameter) or force
        a rescanning operation (see `rescan`).
      operationId: createDomain
      tags:
        - Domain
      parameters:
        - name: domain 
          in: query
          schema:
            type: string
          description: the domain path (e.g. "/home/test_user1/tall.h5")
          example: /home/test_user1/test/tall.h5
        - name: bucket
          in: query
          required: false
          schema:
            type: string
          description: name of the bucket to be used
          example: hsdstest  
        - name: getdnids
          in: query
          required: false
          schema:
            type: number
          description: If present and `1`, return the DN ids in the response
        - name: flush
          in: query
          required: false
          schema:
            type: number
          description: > 
            If present and `1`, force any recent updates to the domain to written to
            permanent storage before returning a response from this request.  
            Returns 200 or 204 (No Content) if successful
        - name: rescan
          in: query
          required: false
          schema:
            type: number
          description: >
            If present and `1`, force a domain scan to be completed before returning
            from this request.
            Returns 200 or 204 (No Content) if successful
      responses:
        '200':
          description: OK - no new resource was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/domain"
        '201':
          description: Created.
            
          content:
            application/json:
              schema:
                type: object
                properties:
                  acls:
                    $ref: "#/components/schemas/ACLS"
                  created:
                    description: When domain was created.
                    type: number
                    examples:
                      - 1521482043.5271084
                  lastModified:
                    description: When object was last modified.
                    type: number
                    examples:
                      - 1521482043.5271084
                  owner:
                    description: Name of owner.
                    type: string
                    examples:
                      - "test_user1"
                  root:
                    description: ID of root group.
                    type: string
                    examples:
                      - "g-82da0346-2b9e-11e8-9391-0242ac110009"
        '400': 
          description: Bad request. Domain name invalid

    get:
      tags:
        - Domain
      summary: Get information about the requested domain.
      description: >
        If the domain is of class 'folder', `root` is absent from returned
        JSON object.

        If no domain query parameter is provided, returns:
        `{"domains": [], "href": []}`
      operationId: getDomain
      parameters:
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: Operation successful.
          headers:
            content-length:
              description: Length of response in bytes.
              schema:
                type: string
            Content-Type:
              description: MIME type of response -- always 'application/json'
              schema:
                type: string
                enum:
                  - application/json

          content:
            application/json:
              schema:
                type: object
                properties:
                  root:
                    description: >
                      UUID of root Group.
                      If Domain is of class 'folder', this entry is not present.
                    type: string
                    examples:
                      - "g-82da0346-2b9e-11e8-9391-0242ac110009"
                  owner:
                    type: string
                    examples:
                      - "test_user1"
                  class:
                    description: >
                      Category of Domain.
                      If 'folder' no root group is included in response.
                    type: string
                    enum:
                      - domain
                      - folder
                    examples:
                      - domain
                  created:
                    type: number
                    examples:
                      - 1521476710.039304
                  lastModified:
                    type: number
                    examples:
                      - 1521476710.039304
                  hrefs:
                    description: >
                      Array of url references and their relation to this Domain.
                      Should include entries for:
                      `acls`,
                      `database` (if not class is not `folder`),
                      `groupbase` (if not class is not `folder`),
                      `parent`,
                      `root` (if not class is not `folder`),
                      `self`,
                      `typebase` (if not class is not `folder`).
                    type: array
                    items:
                      type: object
                      properties:
                        href:
                          description: URL to reference.
                          type: string
                        rel:
                          description: Relation to this Domain.
                          type: string
                    examples:
                      - rel: acls
                        href: "http://hsds.hdf.test:5101/acls?domain=/home/test_user1/test/tall.h5"
                      - rel: database
                        href: "http://hsds.hdf.test:5101/datasets?domain=/home/test_user1/test/tall.h5"
                      - rel: groupbase
                        href: "http://hsds.hdf.test:5101/groups?domain=/home/test_user1/test/tall.h5"
                      - rel: parent
                        href: "http://hsds.hdf.test:5101/?domain=/home/test_user1?domain=/home/test_user1/test/tall.h5"
                      - rel: root
                        href: "http://hsds.hdf.test:5101/groups/g-17d88042-2b92-11e8-9391-0242ac110009?domain=/home/test_user1/test/tall.h5"
                      - rel: self
                        href: "http://hsds.hdf.test:5101/?domain=/home/test_user1/test/tall.h5"
                      - rel: typebase
                        href: "http://hsds.hdf.test:5101/datatypes/?domain=/home/test_user1/test/tall.h5"
        '400': 
          description: Bad request. Domain name invalid

    delete:
      tags:
        - Domain
      summary: Delete the specified Domain or Folder.
      description: >
        Delete the domain and all associated groups, datasets, attributes,
        etc.

        Note: if there are Domains which are children of this Domain
        (e.g., deleting `somedir` from `/home/user/project/somedir/data.h5`),
        a 409 error (Conflict) will be returned.
      operationId: deleteDomain
      parameters:
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                type: object
                description: The Domain or Folder which was deleted.
                properties:
                  domain:
                    type: string
                    description: domain path
                    example: /home/test_user1/test/tall.h5
        '400': 
            description: Bad request. Domain name invalid
  # end '/'
  
  /{object_class}/{object_id}/{attribute_name}:
    get:
      summary: Get an attribute from an object.
      description: >
        Get the value of an attribute from a group, dataset, or committed datatype.
      operationId: getAttribute
      tags:
        - Attribute
      parameters:
        - name: object_class
          in: path
          required: true
          schema:
            type: string
          description: >
            The class of object to which the attribute belongs.
            Must be one of `groups`, `datasets`, or `datatypes`.
          example: groups

        - name: object_id
          in: path
          required: true
          schema:
            type: string
          description: >
            The UUID of the object to which the attribute belongs.
          example: g-82da0346-2b9e-11e8-9391-0242ac110009

        - name: attribute_name
          in: path
          required: true
          schema:
            type: string
          description: >
            The name of the attribute to retrieve.
          example: "attr1"
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    type: object
                    description: >
                      The value of the attribute. 
                      Type is an array for non-scalar datasets, or a string/number for scalar datasets.
                    
                    example: [1, 2, 3]

                  type:
                    type: object
                    description: A JSON object representing the type of the attribute.
                  shape: 
                    $ref: "#/components/schemas/shape"
        '400': 
            description: Bad request. Object class, object ID, or attribute name invalid.
        '404':
            description: Object or attribute not found.

    delete:
      summary: Delete an attribute from an object.
      description: >
        Delete an attribute from an object by name.
      operationId: deleteAttribute
      tags:
        - Attribute
      parameters:
        - name: object_class
          in: path
          required: true
          schema:
            type: string
          description: >
            The class of object to which the attribute belongs.
            Must be one of `groups`, `datasets`, or `datatypes`.
          example: groups
        - name: object_id
          in: path
          required: true
          schema:
            type: string
          description: >
            The UUID of the object to which the attribute belongs.
          example: g-82da0346-2b9e-11e8-9391-0242ac110009
        - name: attribute_name
          in: path
          required: true
          schema:
            type: string
          description: >
            The name of the attribute to delete.
          example: "attr1"
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  hrefs:
                    type: array
                    description: An array of links to related resources.
                    items:
                      type: object
        '400': 
            description: Bad request. Object class, object ID, or attribute name invalid.
        '404':
            description: Object or attribute not found.
    
    put:
      summary: Create a new attribute on an object.
      description: >
        Create a new attribute on a group, dataset, or committed datatype. 
        The new attribute will replace any existing attribute with the same name.
        The request body must include a JSON object with "type" key. 
        Optionally a "shape" key can be provided to make a non-scalar attribute.

      operationId: putAttribute
      tags:
        - Attribute
      parameters:
        - name: object_class
          in: path
          required: true
          schema:
            type: string
          description: >
            The class of object to which the attribute belongs.
            Must be one of `groups`, `datasets`, or `datatypes`.
          example: groups

        - name: object_id
          in: path
          required: true
          schema:
            type: string
          description: >
            The UUID of the object to which the attribute belongs.
          example: g-82da0346-2b9e-11e8-9391-0242ac110009

        - name: attribute_name
          in: path
          required: true
          schema:
            type: string
          description: >
            The name of the attribute to create.
          example: "attr1"

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: object
                  description: >
                    A JSON array (or number or string for scalar attributes with primitive types) 
                    that specifies the initial values for the attribute. 
                    The elements of the array must be compatible with the type of the attribute. 
                    Not valid to provide if the shape is `H5S_NULL`.
                  example: [1, 2, 3]
                type:
                  type: object
                  description: >
                    Either a string that is one of the predefined type values, 
                    a UUID of a committed type, or a JSON object describing the type.
                shape: 
                  description: >
                    Either a string with the value `H5S_NULL` or an integer array describing the 
                    dimensions of the attribute. 
                    
                    If shape is not provided, a scalar attribute will be created.

                    If a shape value of `H5S_NULL` is specified a null space attribute will be created. (Null space attributes can not contain any data values.)
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  hrefs:
                    type: array
                    description: An array of links to related resources.
                    items:
                      type: object
        '400': 
            description: Bad request.
        '404':
            description: Parent object or folder not found.

components:
  schemas:
    ACL:
      description: Access Control List for a single user.
      type: object
      properties:
        username:
          type: object
          properties:
            create:
              type: boolean
            update:
              type: boolean
            delete:
              type: boolean
            updateACL:
              type: boolean
            read:
              type: boolean
            readACL:
              type: boolean
    ACLS:
      type: object
      description: Access Control Lists for users.
      properties:
        forWhom:
          $ref: "#/components/schemas/ACL"
      examples:
        - test_user1:
            create: true
            update: true
            delete: true
            updateACL: true
            read: true
            readACL: true
          default:
            create: false
            update: false
            delete: false
            updateACL: false
            read: true
            readACL: false
    domain:
      type: object
      description: Collection of groups, datasets, and committed data types.  Equivalent to an HDF5 file
      properties:
        root:
          type: string
          description: UUID of the root group (if not present, this object is a folder)
          example: g-e8dda816-a099c9ae-6055-209e28-114126
        owner:
          type: string
          description: username of the owner of this domain
          example: test_user1
        created:
          type: number
          description: object creation timestamp
          example: 1708897794.5621212
        lastModified:
          type: number
          description: object last modified time
          example: 1710245213.8037271
    shape:
      type: object
      description: >
        A JSON object representing the dataspace of the attribute.
      properties:
        class:
          type: string
          description: The class of the dataspace.
          enum:
            - H5S_NULL
            - H5S_SCALAR
            - H5S_SIMPLE
          example: H5S_SCALAR
        dims:
          type: array
          description: >
            An integer array whose length is equal to the number of dimensions (rank) of the dataspace. 
            The value of each element gives the current size of each dimension. 
            Dims is not returned for H5S_NULL or H5S_SCALAR dataspaces.
          items:
            type: number
      example: [1]
  parameters:
    authorization:
      in: header
      name: Authorization
      schema:
        type: string
        description: >
          Credentials for the request.

          'Basic' authorization, `"Basic " + base64(<username>:<password>)`
    query_domain:
      in: query
      name: domain
      schema:
        type: string
        description: Domain on service to access, e.g., `/home/user/someproject/somefile`.

  securitySchemes:
    basicAuth:
      type: http
      scheme: basic


