# $schema: “https://spec.openapis.org/oas/3.1/dialect/base”
openapi: "3.1.0"
info:
  title: HDF Scalable Data Service REST API
  description: RESTful application programming interface documentation for HDF Scalable Data Service (HSDS).
  contact:
    name: The HDF Group
    url: https://www.hdfgroup.org
    email: info@hdfgroup.org
  # termsOfService: TODO url
  license:
     name: Apache 2.0
     url: https://www.apache.org/licenses/LICENSE-2.0
  version: "2.0"

externalDocs:
  description: HSDS REST API documentation
  url: "http://h5serv.readthedocs.io/en/latest/index.html"

tags:
  - name: Domain
    description: Operations involving the file Domain.
  - name: Group
    description: Operations involving Groups.
  - name: Link
    description: Operations involving Links.
  - name: Dataset
    description: Operations involving Datasets.
  - name: Datatype
    description: Operations involving Datatypes.
  - name: Attribute
    description: Operations involving Attributes.
  - name: ACLS
    description: Operations involving Attributes.

servers:
  - url: http://hsds.hdf.test:5101
    description: HSDS default server

# TBD: see https://redocly.com/docs/cli/rules/security-defined/
security: []

components:
  schemas:
    ACL:
      description: Access Control List for a single user.
      type: object
      properties:
        username:
          type: object
          properties:
            create:
              type: boolean
            update:
              type: boolean
            delete:
              type: boolean
            updateACL:
              type: boolean
            read:
              type: boolean
            readACL:
              type: boolean
    ACLS:
      type: object
      description: Access Control Lists for users.
      properties:
        forWhom:
          $ref: "#/components/schemas/ACL"
      examples:
        - test_user1:
            create: true
            update: true
            delete: true
            updateACL: true
            read: true
            readACL: true
          default:
            create: false
            update: false
            delete: false
            updateACL: false
            read: true
            readACL: false

  parameters:
    authorization:
      in: header
      name: Authorization
      schema:
        type: string
        description: >
          Credentials for the request.

          'Basic' authorization, `"Basic " + base64(<username>:<password>)`
    query_domain:
      in: query
      name: domain
      schema:
        type: string
        description: Domain on service to access, e.g., `/home/user/someproject/somefile`.

  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

paths:
  /:
    put:
      tags:
        - Domain
      summary: Create a new Domain on the service.
      description: >
        Domains represent dataspaces analogous to hdf5 files.

        Folders are 'placeholder' domains which lack a root Group. Their
        main use is to manage top-level directories (outside of user space)
        and to fill out a user's directory paths if required.
        E.g., `/home/user/project/missingdir/data.h5`

        Note: Initially, the only object in a Domain is the root group. Use
        other `put` and `post` operations to create new objects in the
        domain.

        Note: Domains (and Folders) may only be created as direct children
        of existing Domains. e.g., `/home/user/project/missingdir` _must_
        exist prior to the creation of Domain
        `/home/user/project/missingdir/data.h5`.

        Note: The operation will fail if the domain already exists
        (Error 409).
      operationId: createDomain
      requestBody:
        content:
          application/json:
            schema:
              type: object
      parameters:
        - $ref: "#/components/parameters/query_domain"
        - name: folder
          in: query
          schema:
            type: number
          description: If present and `1`, creates a Folder instead of a Domain.
        - $ref: "#/components/parameters/authorization"
      responses:
        '201':
          description: Created.
          headers:
            Content-Length:
              description: Length of response in bytes.
              schema:
                type: string
            Etag:
              description: Hash-code status of resource.
              schema:
                type: string
            Content-Type:
              description: MIME type of response.
              schema:
                type: string
                enum:
                  - application/json
          content:
            application/json:
              schema:
                type: object
                properties:
                  acls:
                    $ref: "#/components/schemas/ACLS"
                  created:
                    description: When domain was created.
                    type: number
                    examples:
                      - 1521482043.5271084
                  lastModified:
                    description: When object was last modified.
                    type: number
                    examples:
                      - 1521482043.5271084
                  owner:
                    description: Name of owner.
                    type: string
                    examples:
                      - "test_user1"
                  root:
                    description: ID of root group.
                    type: string
                    examples:
                      - "g-82da0346-2b9e-11e8-9391-0242ac110009"
        '400': 
          description: Bad request. Domain name invalid

    get:
      tags:
        - Domain
      summary: Get information about the requested domain.
      description: >
        If the domain is of class 'folder', `root` is absent from returned
        JSON object.

        If no domain query parameter is provided, returns:
        `{"domains": [], "href": []}`
      operationId: getDomain
      parameters:
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: Operation successful.
          headers:
            content-length:
              description: Length of response in bytes.
              schema:
                type: string
            Content-Type:
              description: MIME type of response -- always 'application/json'
              schema:
                type: string
                enum:
                  - application/json

          content:
            application/json:
              schema:
                type: object
                properties:
                  root:
                    description: >
                      UUID of root Group.
                      If Domain is of class 'folder', this entry is not present.
                    type: string
                    examples:
                      - "g-82da0346-2b9e-11e8-9391-0242ac110009"
                  owner:
                    type: string
                    examples:
                      - "test_user1"
                  class:
                    description: >
                      Category of Domain.
                      If 'folder' no root group is included in response.
                    type: string
                    enum:
                      - domain
                      - folder
                    examples:
                      - domain
                  created:
                    type: number
                    examples:
                      - 1521476710.039304
                  lastModified:
                    type: number
                    examples:
                      - 1521476710.039304
                  hrefs:
                    description: >
                      Array of url references and their relation to this Domain.
                      Should include entries for:
                      `acls`,
                      `database` (if not class is not `folder`),
                      `groupbase` (if not class is not `folder`),
                      `parent`,
                      `root` (if not class is not `folder`),
                      `self`,
                      `typebase` (if not class is not `folder`).
                    type: array
                    items:
                      type: object
                      properties:
                        href:
                          description: URL to reference.
                          type: string
                        rel:
                          description: Relation to this Domain.
                          type: string
                    examples:
                      - rel: acls
                        href: "http://hsds.hdf.test:5101/acls?domain=/home/test_user1/test/tall.h5"
                      - rel: database
                        href: "http://hsds.hdf.test:5101/datasets?domain=/home/test_user1/test/tall.h5"
                      - rel: groupbase
                        href: "http://hsds.hdf.test:5101/groups?domain=/home/test_user1/test/tall.h5"
                      - rel: parent
                        href: "http://hsds.hdf.test:5101/?domain=/home/test_user1?domain=/home/test_user1/test/tall.h5"
                      - rel: root
                        href: "http://hsds.hdf.test:5101/groups/g-17d88042-2b92-11e8-9391-0242ac110009?domain=/home/test_user1/test/tall.h5"
                      - rel: self
                        href: "http://hsds.hdf.test:5101/?domain=/home/test_user1/test/tall.h5"
                      - rel: typebase
                        href: "http://hsds.hdf.test:5101/datatypes/?domain=/home/test_user1/test/tall.h5"
        '400': 
          description: Bad request. Domain name invalid

    delete:
      tags:
        - Domain
      summary: Delete the specified Domain or Folder.
      description: >
        Delete the domain and all associated groups, datasets, attributes,
        etc.

        Note: if there are Domains which are children of this Domain
        (e.g., deleting `somedir` from `/home/user/project/somedir/data.h5`),
        a 409 error (Conflict) will be returned.
      operationId: deleteDomain
      parameters:
        - $ref: "#/components/parameters/query_domain"
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: Operation successful.
          headers:
            content-length:
              description: Length of response in bytes.
              schema:
                type: string
            Content-Type:
              description: MIME type of response -- always 'application/json'
              schema:
                type: string
                enum:
                  - application/json
          content:
            application/json:
              schema:
                type: object
                description: The Domain or Folder which was deleted.
                properties:
                  domain:
                    type: string
                    description: domain path
                    examples:
                      - "/home/test_user/some_path/some_file"
        '400': 
            description: Bad request. Domain name invalid

  # end '/'

